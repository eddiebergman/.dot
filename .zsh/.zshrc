# Directories
export DOT_DIR="$HOME/.dot"
export ZSH_DIR="$DOT_DIR/.zsh"
export VIM_DIR="$DOT_DIR/.vim"
export CONFIG_DIR="$DOT_DIR/.config"
export INSTALLER_DIR="$DOT_DIR/installers"
export SHARE_DIR="$HOME/.local/share"
export ZDOTDIR="$ZSH_DIR"

# General environemnt variables
export VISUAL="nvim"
export EDITOR="nvim"
# export PAGER="most"

# Path things
export PATH="${PATH}:${HOME}/.local/bin"

# For Desktop Enviroment set to true
# setup.desktop.sh should uncomment this
# It can be used to know what environment we are in for zsh/nvim/git etc..
export DESKTOP_ENV=true

source $ZSH_DIR/alias.zsh

# The following lines were added by compinstall
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' matcher-list '' ''
zstyle :compinstall filename '/home/skantify/.zshrc'

#l Enabling History
HISTFILE=~/.histfile
HISTSIZE=5000
SAVEHIST=1000

# Opts
setopt extendedglob 	# Enables wildcards
setopt notify		# Enables report of status of background jobs
setopt complete_aliases # Enables completion of aliases

# Allows vi like navigation in shell input
bindkey -v

# Autoload and call
autoload -Uz compinit promptinit
compinit
promptinit

# Theme
source $SHARE_DIR/powerlevel10k/powerlevel10k.zsh-theme
[[ -f ~/.dot/.zsh/.p10k.zsh ]] && source ~/.dot/.zsh/.p10k.zsh

# GNU dir colours
eval `dircolors ~/.dir_colors`

datestamp () { echo "$(date -Idate)" }

#
# Latex note creator
# 1 - title
# Creates a minimal latex note in a set directory
# Filename is generated by note_name()
#

note_template="$DOT_DIR/latex/note_template.tex"

note () {
    if [ $# -eq 1 ]
    then
        local note="$(note_name $1)"
        # Had weird issues with cp and combined vars
        # and no such file/dir errors
        # Had to just insert in the fullpath
        cp $note_template ~/Desktop/write/notes/$note
        sed -i s/replacemeTitle/$1/g ~/Desktop/write/notes/$note
        sed -i s/replacemeDate/$(datestamp)/g ~/Desktop/write/notes/$note
        cd ~/Desktop/write/notes
        nvim $note
    else
        echo ">note mynotename"
    fi
}

note_name () {
    echo "$(datestamp).$1.tex" | tr -d -
}

template () {

    # Template locations
    local python_template=~/Desktop/templates/test1.py
    local java_template=~/Desktop/templates/test2

    # If the fist argument is empty OR the second argument is empty
    # Then print out some help on how to use `template`
    # Also prints this out if user types 'template --help'
    if [[ -z $1 ]] || [[ -z $2 ]] || [[ $1 == "--help" ]] then
        echo "template <template name> <destination>

            <template name> can be one of: python, java
            <destination> is where to place the template

            Example usage:

            - Copy the python template to your current
            directory and name it 'mypythonfile.py'

            \$ template python ./mypythonfile.py

            - Copy the java template to some
            specified location

            \$ template java ~/Desktop/myjavafile.java
        "
        # Exit the function early
        return
    fi

    # Named variables
    local template_type="$1"
    local destination="$2"

    # Copying our templates
    if [[ $template_type == "python" ]]
    then
        cp $python_template $destination

    elif [[ $template_type == "java" ]]
    then
        cp $java_tmeplate $destination

    else
        echo "Sorry, $template_type is note a valid template,
            Valid templates:
                python
                java
            "
    fi
}
